{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TopMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeLocation","val","setState","locate","selection","state","react_default","a","createElement","App_Home","App_Experience","App_Skills","App_Contact","render","react","index_es","variant","style","flex","onClick","bind","assertThisInitialized","className","Component","Home","Experience","Skills","Contact","App","App_TopMenu","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAIMA,sBACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,eAAiB,SAAAC,GACfR,EAAKS,SAAS,CAACC,OAAOF,KAVNR,EAYlBW,UAAY,WACV,OAAOX,EAAKY,MAAMF,QAChB,IAAK,OACL,OAAOG,EAAAC,EAAAC,cAACC,EAAD,MAEP,IAAK,aACL,OAAOH,EAAAC,EAAAC,cAACE,EAAD,MAEP,IAAK,SACL,OAAOJ,EAAAC,EAAAC,cAACG,EAAD,MAEP,IAAK,UACL,OAAOL,EAAAC,EAAAC,cAACI,EAAD,QAxBOnB,EA4BlBoB,OAAS,WACP,OACEP,EAAAC,EAAAC,cAACM,EAAA,SAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAASC,QAAQ,SACfV,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYE,MAAO,CAACC,KAAK,IACvBZ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,QAAQ,WAAWG,QAAS1B,EAAKO,eAAeoB,KAApB1B,OAAA2B,EAAA,EAAA3B,QAAA2B,EAAA,EAAA3B,CAAAD,IAA8B,SAAlE,SAEFa,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQI,QAAS1B,EAAKO,eAAeoB,KAApB1B,OAAA2B,EAAA,EAAA3B,QAAA2B,EAAA,EAAA3B,CAAAD,IAA8B,eAA/C,cACAa,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQI,QAAS1B,EAAKO,eAAeoB,KAApB1B,OAAA2B,EAAA,EAAA3B,QAAA2B,EAAA,EAAA3B,CAAAD,IAA8B,WAA/C,cACAa,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQI,QAAS1B,EAAKO,eAAeoB,KAApB1B,OAAA2B,EAAA,EAAA3B,QAAA2B,EAAA,EAAA3B,CAAAD,IAA8B,YAA/C,YAGFa,EAAAC,EAAAC,cAAA,OAAKc,UAAU,WACZ7B,EAAKW,eAvCZX,EAAKY,MAAQ,CACXF,OAAQ,QAHMV,mFAOhBG,KAAKI,eAAiBJ,KAAKI,eAAeoB,KAAKxB,aAR7B2B,cAiDhBC,EAAO,kBAAMlB,EAAAC,EAAAC,cAAA,mBACbiB,EAAa,kBAAMnB,EAAAC,EAAAC,cAAA,yBACnBkB,EAAS,kBAAMpB,EAAAC,EAAAC,cAAA,qBACfmB,EAAU,kBAAMrB,EAAAC,EAAAC,cAAA,sBAYPoB,mLARX,OACEtB,EAAAC,EAAAC,cAACM,EAAA,SAAD,KACER,EAAAC,EAAAC,cAACqB,EAAD,cAJUN,aC9CEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStB,OAAOP,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b3ceb3bf.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Typography, Toolbar, Button } from '@material-ui/core';\nimport './App.css';\n\nclass TopMenu extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      locate: 'Home'\n    }\n  }\n  componentDidMount(){\n    this.changeLocation = this.changeLocation.bind(this);\n  }\n  changeLocation = val => {\n    this.setState({locate:val});\n  }\n  selection = () => {\n    switch(this.state.locate){\n      case 'Home':\n      return <Home />\n      break;\n      case 'Experience':\n      return <Experience />\n      break;\n      case 'Skills':\n      return <Skills />\n      break;\n      case 'Contact':\n      return <Contact />\n      break;\n    }\n  }\n  render = () => {\n    return (\n      <Fragment>\n        <Toolbar variant=\"dense\">\n          <Typography style={{flex:1}}>\n            <Button variant=\"outlined\" onClick={this.changeLocation.bind(this,\"Home\")}>Home</Button>\n          </Typography>\n          <Button onClick={this.changeLocation.bind(this,\"Experience\")}>experience</Button>\n          <Button onClick={this.changeLocation.bind(this,\"Skills\")}>slills set</Button>\n          <Button onClick={this.changeLocation.bind(this,\"Contact\")}>contact</Button>\n        </Toolbar>\n        \n        <div className=\"content\">\n          {this.selection()}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst Home = () => <h1>Home</h1>;\nconst Experience = () => <h1>Experience</h1>;\nconst Skills = () => <h1>Skills</h1>;\nconst Contact = () => <h1>Contact</h1>;\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <TopMenu />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}